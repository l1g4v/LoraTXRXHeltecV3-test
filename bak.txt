#![no_std]
#![no_main]

use core::{future::{Future, IntoFuture}, pin::pin, ptr::addr_of_mut, str};

use embassy_executor::Spawner;
use embassy_time::{Delay, Duration, Timer};
use embedded_hal_bus::spi::ExclusiveDevice;
use esp_backtrace as _;
use esp_hal::{
    self,
    clock::CpuClock,
    cpu_control::{CpuControl, Stack},
    dma::{DmaRxBuf, DmaTxBuf},
    dma_buffers,
    gpio::{Input, Level, Output, Pull, RtcFunction},
    interrupt::{software::SoftwareInterruptControl, Priority},
    spi::{
        master::{Config, Spi, SpiDmaBus},
        Mode,
    },
    time::RateExtU32,
    timer::{timg::TimerGroup, AnyTimer},
    uart::{Uart, UartRx},
    Async,
};
use esp_hal_embassy::{main, Executor, InterruptExecutor};
use esp_println::println;

use embassy_sync::blocking_mutex::raw::CriticalSectionRawMutex;
use embassy_sync::channel::Channel;
use log::{info, error};

//LoRa
use lora_phy::{iv::GenericSx126xInterfaceVariant, mod_traits::{IrqState, RadioKind}};
use lora_phy::sx126x::{Sx1262, Sx126x, TcxoCtrlVoltage};
use lora_phy::{};
use lora_phy::{mod_params::*, sx126x};
use ssd1306::mode;
use static_cell::StaticCell;

const LORA_FREQUENCY_IN_HZ: u32 = 915_000_000;
const LORA_BANDWIDTH: Bandwidth = Bandwidth::_250KHz;
const LORA_SPREADING_FACTOR: SpreadingFactor = SpreadingFactor::_9;
const LORA_CODING_RATE: CodingRate = CodingRate::_4_7;
const LORA_PREAMBLE_LENGTH: u16 = 8;
const LORA_TX_POWER: i32 = 0;
const LORA_BUFFER_SIZE: usize = 100;
//Multicore
//static mut APP_CORE_STACK: esp_hal::cpu_control::Stack<8192> = esp_hal::cpu_control::Stack::new();
static mut CORE1_STACK: Stack<4096> = Stack::new();
static EXECUTOR0: StaticCell<Executor> = StaticCell::new();
static EXECUTOR1: StaticCell<Executor> = StaticCell::new();

static TX_CHANNEL_DATA: Channel<CriticalSectionRawMutex, ([u8; LORA_BUFFER_SIZE], usize), 1> =
    Channel::new();
//static TX_CHANNEL_ADVISE: Channel<CriticalSectionRawMutex, bool, 1> = Channel::new();

#[main]
async fn main(_spawner: Spawner) {
    esp_println::logger::init_logger_from_env();

    let mut config = esp_hal::Config::default();
    config.cpu_clock = CpuClock::max();
    let peripherals = esp_hal::init(config);

    let timg0 = TimerGroup::new(peripherals.TIMG0);
    let timer0: AnyTimer = timg0.timer0.into();
    let timer1: AnyTimer = timg0.timer1.into();
    esp_hal_embassy::init([timer0, timer1]);

    //threading
    let mut cpu_control = CpuControl::new(peripherals.CPU_CTRL);

    //SPI configuration
    let sclk = peripherals.GPIO9;
    let miso = peripherals.GPIO11;
    let mosi = peripherals.GPIO10;
    let cs = peripherals.GPIO8;
    let dma_channel = peripherals.DMA_CH0;

    let (rx_buffer, rx_descriptors, tx_buffer, tx_descriptors) = dma_buffers!(32000);
    let dma_rx_buf = DmaRxBuf::new(rx_descriptors, rx_buffer).unwrap();
    let dma_tx_buf = DmaTxBuf::new(tx_descriptors, tx_buffer).unwrap();

    let spi = Spi::new(
        peripherals.SPI2,
        Config::default()
            .with_frequency(RateExtU32::kHz(100))
            .with_mode(Mode::_0),
    )
    .unwrap()
    .with_sck(sclk)
    .with_mosi(mosi)
    .with_miso(miso)
    .with_dma(dma_channel)
    .with_buffers(dma_rx_buf, dma_tx_buf)
    .into_async();

    //LoRa
    let nss = Output::new(cs, Level::High);
    let reset = Output::new(peripherals.GPIO12, Level::High);
    let dio1 = Input::new(peripherals.GPIO14, Pull::None);
    let busy = Input::new(peripherals.GPIO13, Pull::None);

    let spi = ExclusiveDevice::new(spi, nss, Delay).unwrap();

    let iv = GenericSx126xInterfaceVariant::new(reset, dio1, busy, None, None).unwrap();
    let debug_indicator = Output::new(peripherals.GPIO35, Level::Low);
    let _guard = cpu_control
        .start_app_core(unsafe { &mut *addr_of_mut!(CORE1_STACK) }, move || {
            let executor1 = EXECUTOR1.init(Executor::new());
            //let spawner = executor_core1.start(Priority::Priority1);
            executor1.run(|spawner| {
                let _ = spawner.spawn(radio(spi, iv, debug_indicator));
            });
            //spawner.spawn(radio(spi, iv)).ok();
        })
        .unwrap();

    let config = esp_hal::uart::Config::default().with_baudrate(115200);
    let mut uart_rx = UartRx::new(peripherals.UART0, config).unwrap().into_async();
    let mut buffer = [0u8; LORA_BUFFER_SIZE];
    Timer::after(Duration::from_millis(100)).await;
    TX_CHANNEL_DATA.send((buffer, 5)).await;
    loop {
        let len = uart_rx.read_async(&mut buffer).await.unwrap();
        if len > 0 {
            let x = buffer.clone();
            TX_CHANNEL_DATA.send((x, len)).await;
            info!("UART RX = {:?}", &buffer[..len]);
            //Timer::after(Duration::from_millis(100)).await;
        }
    }
}




#[embassy_executor::task]
async fn radio(
    spi: ExclusiveDevice<SpiDmaBus<'static, Async>, Output<'static>, Delay>,
    iv: GenericSx126xInterfaceVariant<Output<'static>, Input<'static>>,
    mut debug_indicator: Output<'static>,
) {
    info!(
        "Starting radio() on core {}",
        esp_hal::Cpu::current() as usize
    );

    let config = sx126x::Config {
        chip: Sx1262,
        tcxo_ctrl: Some(TcxoCtrlVoltage::Ctrl1V7),
        use_dcdc: true,
        rx_boost: true,
    };
    let mut modem = Sx126x::new(spi, iv, config);
    
    let mut receiving_buffer = [00u8; LORA_BUFFER_SIZE];
    
    let mdltn_params = {
        match modem.create_modulation_params(
            LORA_SPREADING_FACTOR,
            LORA_BANDWIDTH,
            LORA_CODING_RATE,
            LORA_FREQUENCY_IN_HZ,
        ) {
            Ok(mp) => mp,
            Err(err) => {
                info!("Radio error = {:?}", err);
                return;
            }
        }
    };
    let base_param = modem.create_packet_params(LORA_PREAMBLE_LENGTH, false, 0, true, false, &mdltn_params).unwrap();
    modem.set_modulation_params(&mdltn_params).await.unwrap();
    modem.set_packet_params(&base_param).await.unwrap();
    modem.set_tx_power_and_ramp_time(LORA_TX_POWER, Some(&mdltn_params), false).await.unwrap();
    modem.set_channel(LORA_FREQUENCY_IN_HZ).await.unwrap();
    modem.set_standby().await.unwrap();
    modem.set_irq_params(Some(RadioMode::Standby)).await.unwrap();
    loop {
        let tx_chn_avb = TX_CHANNEL_DATA.is_full();
        if tx_chn_avb {
            info!("Switching to TX mode");
            let (data, len) = TX_CHANNEL_DATA.receive().await;
            let tx_params = modem.create_packet_params(LORA_PREAMBLE_LENGTH, false, len as u8, true, false, &mdltn_params).unwrap();
            modem.set_packet_params(&tx_params).await.unwrap();
            modem.set_payload(&data[..len]).await.unwrap();
            modem.set_irq_params(Some(RadioMode::Transmit)).await.unwrap();
            modem.do_tx().await.unwrap();
            modem.await_irq().await.unwrap();
            
            match modem.process_irq_event(RadioMode::Transmit, None, true).await {
                Ok(Some(IrqState::Done | IrqState::PreambleReceived)) => {
                    info!("TX done");
                }
                Ok(None) => {},
                Err(err) => {
                    error!("TX error = {:?}", err);
                }

            }
            info!("Switching to RX mode");
            modem.set_packet_params(&base_param).await.unwrap();
            modem.set_irq_params(Some(RadioMode::Standby)).await.unwrap();
            modem.set_irq_params(RadioMode::Receive(RxMode::Continuous).into()).await.unwrap();
            let _ = modem.do_rx(RxMode::Continuous);
            
        } else {
            /*
            let x = async{
                modem.await_irq().await.unwrap();
                match modem.process_irq_event(RadioMode::Receive(RxMode::Continuous), None, true).await {
                    Ok(Some(state)) => {
                        match state {
                            IrqState::Done => {
                                info!("RX done");
                                let len = modem.get_rx_payload(&base_param, &mut receiving_buffer).await.unwrap();
                                info!("RX payload = {:?}", &receiving_buffer[..len as usize]);
                            }
                            _ => {},
                        }
                    }
                    Ok(None) => {},
                    Err(err) => {
                        error!("RX error = {:?}", err);
                    }
                }
            };
            */
            //modem.await_irq().;
      
            

        }
    }
}
